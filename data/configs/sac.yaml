# Example Config that uses almost all values

alg: SAC
alg_kwargs:
  tau: 0.2
  init_temperature: 0.05
  # init_temperature: 0.05
  critic_freq: 1
  actor_freq: 1
  target_freq: 2
  init_steps: 10000

optim: Adam
optim_kwargs:
  lr: 0.0001
  # lr: 0.0001

network: ActorCriticPolicy
network_kwargs:
  actor_class: DiagonalGaussianMLPActor
  actor_kwargs:
    hidden_layers: [256, 256, 256]
    log_std_bounds: [-5, 2]
    # log_std_bounds: [-10, 1]   # was [-5, 2]
    ortho_init: true
  critic_class: ContinuousMLPCritic
  critic_kwargs:
    hidden_layers: [256, 256, 256]
    ensemble_size: 2
    ortho_init: true

# batch_size: 4
batch_size: 2
collate_fn: null
# collate_fn: ["import", "research.algs.maml", "collate"]
checkpoint: null
seed: null

env: CustomFetchReach-v0
# env_kwargs: {}
env_kwargs: 
  reward_type: dense
wrapper: null
wrapper_kwargs: {}

dataset: ReplayBuffer
dataset_kwargs:
  distributed: false
  discount: 0.9
  nstep: 1
  capacity: 1000000
  fetch_every: 500
  batch_size: 512
  save_episodes: true
  storage_path: research/datasets/fstest/fetchreach
  cleanup: false

processor: null

train_kwargs: # Arguments given to Algorithm.train
  # total_steps: 1000000 # The total number of steps to train
  total_steps: 1000000 # The total number of steps to train
  
  log_freq: 1000 # How often to log values
  eval_freq: 5000 # How often to run evals
  # total_steps: 100 # The total number of steps to train
  # log_freq: 5 # How often to log values
  # eval_freq: 10 # How often to run evals
  eval_fn: eval_policy
  eval_kwargs:
    num_ep: 20 # Number of enviornment episodes to run for evaluation
  loss_metric: reward # The validation metric that determines when to save the "best_checkpoint"
  workers: 0 # Number of dataloader workers.
  profile_freq: 1000
